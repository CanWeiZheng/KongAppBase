plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.kongappbase"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode getProperty("version.properties","versionCode",false).toInteger()
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildFeatures {
        dataBinding = true
    }
    signingConfigs {
        debug {
//            storeFile file('debug.keystore')
            keyAlias '8684'
            keyPassword '8684cn'
            storeFile file('8684key.keystore')
            storePassword '8684cn'
        }
        release {
            keyAlias '8684'
            keyPassword '8684cn'
            storeFile file('8684key.keystore')
            storePassword '8684cn'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    android.applicationVariants.all {
        variant ->
            variant.outputs.all {
                output ->
                    //拿到输出文件
                    def outputFile = output.outputFile
                    //这里也可以调用上面的 (':app:assembleRelease' in runTasks) 进行判断 感觉会更好一些
                    println("==="+outputFile.name)
                    if (outputFile.name.contains("release")) {
                        //在字符串里面调用方法的话，得要${ }里面调用 切记
                        outputFileName = new File("../release/", "release-${getProperty("version.properties", "versionName", false)}-${getProperty("version.properties", "versionCode", false)}.apk")
                        //调用方法 增加versionCode 值
                        println("===release 自增调用")
                        PropertyAdd("version.properties", "versionCode")
                    }
                    if (outputFile.name.contains("debug")) {
                        outputFileName = new File("../debug/", "debug-${getProperty("version.properties", "versionName", false)}-${getProperty("version.properties", "versionCode", false)}.apk")
                    }
            }
    }


}

def getProperty(String filename, String propName, boolean isRootProject) {
    //在这里 必须是在rootProject.file  如果 file的话 ，编译时候会出错
    def propsFile
    if (isRootProject) {
        propsFile = rootProject.file(filename)
    } else {
        propsFile = file(filename)
    }
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            //下面这个输出在android studio3.1里面 在Build窗口 右边一个锤子下面 toggle哪里，就是原来的message哪里
            println("versionCode " + props[propName])
            return props[propName]
        } else {
            println("No such property " + propName + " in file " + filename);
        }
    } else {
        println(filename + " does not exist!")
    }
}

//version.properties  里面的vesioncode自增
def PropertyAdd(String filename, String propName) {
    println("===PropertyAdd 自增调用")
    //这里必须用file  如果用rootProject的话 则找不到file为null
    def propsFile = file(filename)
    //只有在打正式版的情况下才继续运行，否则退出方法，这样是为了防止 编译时候versionCode 也自增 if里面的参数可以在Build窗口里面 message 最上边[]里面就是
    def runTasks = gradle.startParameter.taskNames
    if (!(':app:assembleRelease' in runTasks)) {
        return
    }
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        //这里要注意 props[propName] 是String 类型
        if (props[propName] != null) {
            def code = (props[propName]).toInteger() //转成Integer
            props[propName] = (++code).toString()  //自增 且转成String
        } else {
            print("No such property " + propName + " in file " + filename);
        }
        //在这里提交 对version.properties的更改
        props.store(propsFile.newWriter(), null)
    } else {
        print(filename + " does not exist!")
    }
}


dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation project(path: ':baselibrary')
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'


    implementation 'cn.aigestudio.wheelpicker:WheelPicker:1.1.3'
}